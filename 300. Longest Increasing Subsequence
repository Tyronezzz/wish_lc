class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        
        // nlogn
        int n = nums.size();
        if(n<=1) return n;
        vector<int> tail(n);
        int size=0;
        for(int num:nums)
        {
            int left = 0, right=size;
            while(left<right)
            {
                int mid = left + (right-left)/2;
                if(num <= tail[mid])
                    right = mid;
                else
                    left= mid+1;
            }
            
            tail[left] = num;
            if(left==size)
                size++;
        }
        return size;
        
        
// largest sum of LIS        
//         int n = nums.size();
//         if(n<=1) return n;
        
//         vector<int> dp(n, 0);
//         for(int i=0;i<n;i++)
//             dp[i] = nums[i];
        
        
//         int result=INT_MIN;
        
//         for(int i=1;i<n;i++)
//         {
//             for(int j=0;j<i;j++)
//             {
//                 if(nums[i]>nums[j] && dp[i]< dp[j]+nums[i])
//                     dp[i] = dp[j] + nums[i];            
//             }   
//         }
        
//         for(int i=0;i<n;i++)
//             result = max(result, dp[i]);
        
//         return result;
        
        
         // O(n^2)
//         int n = nums.size();
//         if(n<=1) return n;
        
//         vector<int> dp(n, 1);
//         int result=1;
//         dp[0] = 1;
        
//         for(int i=1;i<n;i++)
//         {
//             for(int j=0;j<i;j++)
//             {
//                 if(nums[i]>nums[j])
//                     dp[i] = max(dp[i], dp[j]+1);             
//             }  
//             result = max(result, dp[i]);
            
//         }
        
//         return result;
        
        
    }
};
