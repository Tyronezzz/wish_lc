class Solution {
    
private:
    int m, n;    
    
    void helper(vector<vector<char>>& island, int i, int j)
    {
        if(i<0 || i>=m || j<0 || j>=n || island[i][j] == '0')
            return;
    
        island[i][j] = '0';
        helper(island, i+1, j);
        helper(island, i, j+1);
        helper(island, i-1, j);
        helper(island, i, j-1);
    }
    
    vector<vector<int>> dir = {{0,1}, {1,0}, {0,-1},{-1,0}};
    
    void bfs(vector<vector<char>>& island, int i, int j)
    {
        queue<vector<int>> qu;
        
        qu.push({i, j});
        island[i][j] = '0';
        
        while(!qu.empty())
        {
            int nx = qu.front()[0], ny = qu.front()[1];
            //cout<<nx<<" "<<ny<<endl;
            qu.pop();
            
            for(auto pr:dir)
            {
                int x = nx+pr[0], y = ny+pr[1];
                if(x<0 || x>=m || y<0 || y>=n || island[x][y] == '0')
                    continue;
                else
                {
                    qu.push({x,y});
                    island[x][y] = '0';
                }                 
            }   
        }
    }
    
    
    
    
public:
    int numIslands(vector<vector<char>>& grid) {
        
        vector<vector<char>> island = grid;
        m = grid.size();
        if(m==0) return 0;
        n = grid[0].size();
        int count=0;
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(island[i][j] == '1')
                {
                    count++;
                    helper(island, i, j);
                }
                
            }
            
        }
        return count;
    }
};
