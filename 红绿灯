//
//  main.cpp
//  wish
//
//  Created by Tyrone Hou on 12/11/18.
//  Copyright Â© 2018 Tyrone Hou. All rights reserved.
//

#include <iostream>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <math.h>
#include <string>
#include <set>
using namespace std;

int findMax(vector<char> &lights)   // find most R
{
    int result=0, n = lights.size();
    if(n==0) return 0;
    
    vector<int> pos(2, 0);
    for(int i=0;i<n;i++)
    {
        if(lights[i]=='G')
            continue;
        int cur= 1;
        for(int j=i+1;j<n;j++)
        {
            if(lights[j]=='G')
                cur--;
        
            else
                cur++;
            
            if(result < cur)
            {
                result = max(result, cur);
                pos[0] = i;
                pos[1] = j;
            }
        }
        
    }
    
    cout<<pos[0]<<" "<<pos[1]<<endl;
    return result;
}


int findMax(vector<char> &lights)
{
    if(lights.size()==0) return 0;
    if(lights.size()==1 && lights[0]=='R') return 1;
    
    
    vector<int> sum(lights.size(), 0);
    
    sum[0] = lights[0]=='R'? 1:-1;
    for(int i=1;i<lights.size();i++)
    {
        sum[i] = sum[i-1]+ (lights[i]=='R'? 1:-1);
    }
    
    int result=0, mini=sum[0], start=0, pos=0, end=0;
    for(int i=0;i<lights.size();i++)
    {
        cout<<sum[i]<<" ";
        if(sum[i] < mini)
        {
            mini = sum[i];
            pos = i;
        }
        
        if(result < sum[i] - mini)
        {
            result = max(result, sum[i] - mini);
            start = pos==0? pos: pos+1;
            end=i;
        }
        
    }
    cout<<endl;
    cout<<start<<" "<<end<<endl;
    
    return result;
}



// Driver code
int main()
{
    vector<char> lights = {'R', 'G','R','R','R', 'R','G','G','R', 'R','R','G','G','R','G'};  //
    cout<<findMax(lights)<<endl;
    return 0;
}


