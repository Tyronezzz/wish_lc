//iterative postorder traversal, map<node, int>

class Solution {
public:
    bool isBalanced(TreeNode* root) 
    {
        if(!root) return true;
        unordered_map<TreeNode*, int> umap;
        
        stack<TreeNode*> st;
        st.push(root);
        while(!st.empty())
        {
            TreeNode* cur = st.top();
            

            if(cur->left!=NULL && !umap.count(cur->left))
                st.push(cur->left);
                
            else if(cur->right!=NULL && !umap.count(cur->right))
                st.push(cur->right);
                
            else
            {
                st.pop();
                int leftheight = umap.count(cur->left)? umap[cur->left]: 0;
                int rightheight = umap.count(cur->right)? umap[cur->right]: 0;
                
                int dif = abs(leftheight - rightheight);
                if(dif>1)
                    return false;
                umap[cur] = max(rightheight, leftheight)+1;
            }     
        }
    
        return true;
    }
};



// recursive
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    
    bool isBalanced(TreeNode* root) {
        
        return helper(root) != -1;
    }
    
    int helper(TreeNode* root)
    {
        if(!root) return 0;
        
        int left = helper(root->left);
        int right = helper(root->right);
        if(left==-1 || right ==-1)
            return -1;
        
        if(abs(left - right)>1)
            return -1;
        
        return max(left, right)+1;
    }
    
    
};
