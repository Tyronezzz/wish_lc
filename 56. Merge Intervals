/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    
    
    vector<Interval> merge(vector<Interval>& intervals) {
        
        if(intervals.empty()) 
            return  vector<Interval>{};
        
        sort(intervals.begin(), intervals.end(), [](Interval a, Interval b){return a.start < b.start;});
        vector<Interval> res;
        res.push_back(intervals[0]);
        
        for(Interval itvl: intervals)
        {
            if(itvl.start<= res.back().end)
            {
                res.back().end = max(itvl.end, res.back().end);
            }
            
            else
                res.push_back(itvl);
            
        }
        
        return res;
        
    }
};
